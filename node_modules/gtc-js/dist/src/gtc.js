"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Gtc_instances, _Gtc_base_url, _Gtc_options, _Gtc_hash, _Gtc_jar, _Gtc_http, _Gtc_qr, _Gtc_isLogged, _Gtc_getHash, _Gtc_getQr, _Gtc_checkLogged, _Gtc_loadCookie;
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const jsqr_1 = __importDefault(require("jsqr"));
const jimp_1 = __importDefault(require("jimp"));
const promises_1 = __importDefault(require("fs/promises"));
const events_1 = __importDefault(require("events"));
const qrcode_terminal_1 = __importDefault(require("qrcode-terminal"));
const puppeteer_extra_1 = __importDefault(require("puppeteer-extra"));
const tough_cookie_1 = require("tough-cookie");
const axios_1 = __importDefault(require("axios"));
const random_useragent_1 = __importDefault(require("random-useragent"));
const axios_cookiejar_support_1 = require("axios-cookiejar-support");
const tough_cookie_file_store_1 = require("tough-cookie-file-store");
const puppeteer_extra_plugin_stealth_1 = __importDefault(require("puppeteer-extra-plugin-stealth"));
class Gtc extends events_1.default {
    constructor(options) {
        super();
        _Gtc_instances.add(this);
        _Gtc_base_url.set(this, 'https://web.getcontact.com');
        _Gtc_options.set(this, void 0);
        _Gtc_hash.set(this, void 0);
        _Gtc_jar.set(this, void 0);
        _Gtc_http.set(this, void 0);
        _Gtc_qr.set(this, void 0);
        _Gtc_isLogged.set(this, false);
        __classPrivateFieldSet(this, _Gtc_options, options, "f");
        __classPrivateFieldGet(this, _Gtc_options, "f").cookiePath = __classPrivateFieldGet(this, _Gtc_options, "f")?.cookiePath || `${os_1.default.tmpdir()}/cookie.json`;
        __classPrivateFieldSet(this, _Gtc_jar, new tough_cookie_1.CookieJar(new tough_cookie_file_store_1.FileCookieStore(__classPrivateFieldGet(this, _Gtc_options, "f").cookiePath)), "f");
        __classPrivateFieldSet(this, _Gtc_http, (0, axios_cookiejar_support_1.wrapper)(axios_1.default.create({
            jar: __classPrivateFieldGet(this, _Gtc_jar, "f"),
            headers: { 'User-Agent': random_useragent_1.default.getRandom((ua) => ua.browserName === 'Chrome') },
        })), "f");
    }
    async init() {
        __classPrivateFieldSet(this, _Gtc_hash, await __classPrivateFieldGet(this, _Gtc_instances, "m", _Gtc_getHash).call(this), "f");
        if (__classPrivateFieldGet(this, _Gtc_isLogged, "f")) {
            return;
        }
        if (__classPrivateFieldGet(this, _Gtc_options, "f").showQr) {
            this.on('qrcode', (qr) => {
                qrcode_terminal_1.default.generate(qr, { small: true });
            });
        }
        await Promise.all([__classPrivateFieldGet(this, _Gtc_instances, "m", _Gtc_getQr).call(this), __classPrivateFieldGet(this, _Gtc_instances, "m", _Gtc_checkLogged).call(this)]);
    }
    async find(countryCode, phoneNumber) {
        await __classPrivateFieldGet(this, _Gtc_instances, "m", _Gtc_checkLogged).call(this);
        const browser = await puppeteer_extra_1.default.use((0, puppeteer_extra_plugin_stealth_1.default)()).launch(__classPrivateFieldGet(this, _Gtc_options, "f").puppeteer);
        const page = await browser.newPage();
        await __classPrivateFieldGet(this, _Gtc_instances, "m", _Gtc_loadCookie).call(this, page);
        await page.goto(`${__classPrivateFieldGet(this, _Gtc_base_url, "f")}`);
        await page.waitForSelector('[name="phoneNumber"]');
        await page.evaluate((countryCode, phoneNumber) => {
            const country = document.querySelector('[name="countryCode"]');
            const phone = document.querySelector('[name="phoneNumber"]');
            const submit = document.querySelector('#submitButton');
            country.value = countryCode;
            phone.value = String(phoneNumber);
            submit.click();
        }, countryCode, phoneNumber);
        try {
            await page.waitForSelector('.box.r-profile-box', { timeout: 0 });
            const profile = await page.evaluate(() => {
                const name = document.querySelector('.rpbi-info h1')?.innerHTML?.trim() || null;
                const detail = document.querySelector('.rpbi-info em')?.innerHTML?.split('-');
                const provider = detail?.[0]?.trim() || null;
                const country = detail?.[1]?.trim() || null;
                const img = /url\('([^']+)'\)/.exec(document.querySelector('.rpbi-img')?.innerHTML || '');
                const picture = img ? img[1] : null;
                return { name, provider, country, picture, tags: null };
            });
            await browser.close();
            if (!profile.provider && !profile.country) {
                return null;
            }
            const data = new URLSearchParams();
            data.append('hash', __classPrivateFieldGet(this, _Gtc_hash, "f") || '');
            data.append('phoneNumber', encodeURI(`+${phoneNumber}`));
            data.append('countryCode', countryCode);
            const response = await __classPrivateFieldGet(this, _Gtc_http, "f").post(`${__classPrivateFieldGet(this, _Gtc_base_url, "f")}/list-tag`, data, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Origin': __classPrivateFieldGet(this, _Gtc_base_url, "f"),
                    'Referer': __classPrivateFieldGet(this, _Gtc_base_url, "f") + '/search',
                    'Te': 'trailers',
                },
            });
            if (!response.data || response.data.status !== 'success') {
                return profile;
            }
            return { ...profile, tags: response.data.tags.map(({ tag }) => tag) };
        }
        catch (error) {
            await browser.close();
            this.emit('error', error);
            return null;
        }
    }
}
_Gtc_base_url = new WeakMap(), _Gtc_options = new WeakMap(), _Gtc_hash = new WeakMap(), _Gtc_jar = new WeakMap(), _Gtc_http = new WeakMap(), _Gtc_qr = new WeakMap(), _Gtc_isLogged = new WeakMap(), _Gtc_instances = new WeakSet(), _Gtc_getHash = async function _Gtc_getHash() {
    const result = await __classPrivateFieldGet(this, _Gtc_http, "f").get(__classPrivateFieldGet(this, _Gtc_base_url, "f")).then((res) => res.data);
    const before = result.match(/hash: '([a-fA-F0-9]+)'/);
    const after = result.match(/<input type="hidden" name="hash" value="([a-fA-F0-9]+)"\/>/);
    if (before) {
        __classPrivateFieldSet(this, _Gtc_isLogged, false, "f");
        __classPrivateFieldSet(this, _Gtc_hash, before[1] || null, "f");
    }
    if (after) {
        __classPrivateFieldSet(this, _Gtc_isLogged, true, "f");
        __classPrivateFieldSet(this, _Gtc_hash, after[1] || null, "f");
    }
    this.emit('logged', __classPrivateFieldGet(this, _Gtc_isLogged, "f"));
    return __classPrivateFieldGet(this, _Gtc_hash, "f");
}, _Gtc_getQr = async function _Gtc_getQr() {
    if (__classPrivateFieldGet(this, _Gtc_isLogged, "f")) {
        return;
    }
    const buffer = await __classPrivateFieldGet(this, _Gtc_http, "f").get(`${__classPrivateFieldGet(this, _Gtc_base_url, "f")}/get-qr-code`, {
        responseType: 'arraybuffer',
    });
    const image = await jimp_1.default.read(buffer.data);
    const qr = (0, jsqr_1.default)(new Uint8ClampedArray(image.bitmap.data), image.bitmap.width, image.bitmap.height);
    const result = qr?.data || null;
    if (__classPrivateFieldGet(this, _Gtc_qr, "f") !== result) {
        this.emit('qrcode', result);
    }
    __classPrivateFieldSet(this, _Gtc_qr, result, "f");
    return new Promise((resolve) => {
        const timeout = setTimeout(async () => {
            await __classPrivateFieldGet(this, _Gtc_instances, "m", _Gtc_getQr).call(this);
        }, 20000);
        this.on('logged', (logged) => {
            if (logged) {
                clearTimeout(timeout);
                resolve();
            }
        });
    });
}, _Gtc_checkLogged = async function _Gtc_checkLogged() {
    if (__classPrivateFieldGet(this, _Gtc_isLogged, "f")) {
        return;
    }
    const data = new URLSearchParams();
    data.append('hash', __classPrivateFieldGet(this, _Gtc_hash, "f") || '');
    const response = await __classPrivateFieldGet(this, _Gtc_http, "f").post(`${__classPrivateFieldGet(this, _Gtc_base_url, "f")}/check-qr-code`, data, {
        headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Origin': __classPrivateFieldGet(this, _Gtc_base_url, "f"),
            'Referer': __classPrivateFieldGet(this, _Gtc_base_url, "f") + '/',
            'Te': 'trailers',
        },
    });
    if (response.data?.checkResult || false) {
        __classPrivateFieldSet(this, _Gtc_isLogged, true, "f");
        this.emit('logged', __classPrivateFieldGet(this, _Gtc_isLogged, "f"));
        return;
    }
    await new Promise((resolve) => setTimeout(resolve, 2000));
    await __classPrivateFieldGet(this, _Gtc_instances, "m", _Gtc_checkLogged).call(this);
}, _Gtc_loadCookie = async function _Gtc_loadCookie(page) {
    const string = await promises_1.default.readFile(__classPrivateFieldGet(this, _Gtc_options, "f").cookiePath, { encoding: 'utf8' });
    const cookies = Object.values(JSON.parse(string)).flatMap((domain) => Object.values(domain).flatMap((path) => Object.values(path).map((cookie) => ({
        name: cookie.key,
        value: cookie.value,
        domain: cookie.domain,
        path: cookie.path,
        expires: cookie.expires ? Date.parse(cookie.expires) / 1000 : undefined,
        size: JSON.stringify(cookie).length,
        httpOnly: cookie.httpOnly || false,
        secure: cookie.secure || false,
        session: cookie.expires === undefined,
        priority: 'Medium',
        sameParty: false,
        sourceScheme: 'Secure',
    }))));
    await page.setCookie(...cookies);
};
exports.default = Gtc;
